{
    "openapi": "3.1.0",
    "info": {
        "title": "TinyCart API",
        "description": "\nTinyCart API is a simple mini-shop API. It allows you to manage users,\nproducts, and orders. You can create, read, update, and delete users and\nproducts. You can also create orders for a user with a product and a quantity.\n\nThe API is organized around REST. It has predictable resource-oriented URLs,\naccepts form-encoded request bodies, returns JSON-encoded responses, and uses\nstandard HTTP response codes, authentication, and verbs. It also uses the\nOpenAPI standard to describe its API.\n",
        "version": "v1"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Local server"
        }
    ],
    "paths": {
        "/api/v1/users": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "description": "This endpoint allows you create a user to interact with the system. You\nhave two options:\n\n- **Create a buyer user.**\n- **Create a seller user.**\n\nIf you create a buyer user, you can only buy products. If you create a\nseller user, you can sell and buy products. You specify the user type by\nthe `role` field in the request body. Simply provide `seller` or `buyer`\nwhen creating the user.\n\n**Note**: The `role` can be updated after user creation to accommodate for\nusers whose user type is a `buyer` and would like to upgrade to `seller`.\nThe converse is also true for users who are already of type `seller` to\ndowngrade to a `buyer`.",
                "operationId": "create_user_api_v1_users_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve users on the platform",
                "description": "This endpoint retrieves a list of users or a specific user from the system\nbased on the provided search criteria. You have the flexibility to search\nfor users by their `username` or `email`. This allows for a more targeted\nretrieval of user information, catering to different needs:\n\n- **Search by Username**: If you are looking for a specific user and know\n  their username, you can provide it as a query parameter. This will\n  return the public information of the user associated with the given\n  username.\n\n- **Search by Email**: Similarly, if you have the email of the user, you\n  can use it as a search criterion. This is particularly useful in\n  scenarios where usernames might be forgotten or not known, but the\n  email address is available.\n\nIf no search parameters (`username` or `email`) are provided, the endpoint\nwill return a paginated list of all users in the system. This is useful\nfor getting an overview of all users or for administrative purposes where\na comprehensive list is required.\n\nThis endpoint also supports pagination through the `skip` and `limit`\nquery parameters, allowing you to control the number of users returned in\nthe list and to paginate through large sets of users efficiently.\n\n**Note**: This endpoint is designed with privacy in mind, ensuring that\nsensitive user information is not exposed. It is suitable for both\nadministrative use and functionality within the application that requires\nuser lookup capabilities.",
                "operationId": "get_users_api_v1_users_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Email"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/UsersPublic"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserPublic"
                                        }
                                    ],
                                    "title": "Response Get Users Api V1 Users Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/me": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve current user",
                "description": "This endpoint is dedicated to retrieving the profile information of the\ncurrently authenticated user. It serves as a personal endpoint for users\nto access their own information within the system.\n\nUpon successful authentication, the endpoint returns the profile details\nof the user making the request. This ensures that any sensitive or private\nuser information is appropriately safeguarded while still providing users\nwith access to their own data.\n\nThe endpoint is particularly useful for user profile pages or settings\nwhere users need to view or update their information. It supports\nscenarios where understanding the context of the current user is crucial,\nsuch as personalized user experiences, dashboard displays, or when\nperforming actions that require user identity verification.",
                "operationId": "get_me_api_v1_users_me_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPublic"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update current user",
                "description": "This endpoint is dedicated to allowing the current authenticated user to\nupdate their own profile information. It provides a secure and\nuser-friendly way for users to make changes to their personal details,\nensuring that their profile remains up-to-date.\n\nThis endpoint is crucial for maintaining user engagement and satisfaction,\nas it empowers users with control over their personal information,\nenhancing their overall experience with the application.",
                "operationId": "update_current_user_api_v1_users_me_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete current user",
                "description": "Deletes the current user's account from the system.\n\nThis endpoint is designed to allow authenticated users to delete their own\naccount. It ensures that the operation is secure and that only the account\nowner can initiate and complete the deletion process.",
                "operationId": "delete_current_user_api_v1_users_me_delete",
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/v1/users/me/products": {
            "get": {
                "tags": [
                    "users",
                    "products"
                ],
                "summary": "Retrieve products created by the current user",
                "description": "This endpoint allows the current authenticated user to retrieve a list of\nproducts they have created. It's designed to enable users to easily manage\nand view their own products within the system.\n\nThis endpoint is particularly useful for users who are `sellers`\non the platform, providing them with a quick and efficient way to access\nall products they've listed. It supports pagination through the `skip` and\n`limit` parameters, allowing for scalable and user-friendly navigation\nthrough potentially large product catalogs.",
                "operationId": "get_my_products_api_v1_users_me_products_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductsInUserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/me/orders": {
            "get": {
                "tags": [
                    "users",
                    "orders"
                ],
                "summary": "Retrieve orders made by the current user",
                "description": "This endpoint is tailored for the current authenticated user to retrieve a\nlist of their orders. It provides a personalized view into the orders that\nthe user has placed, facilitating easy tracking and management of their\npurchase history.\n\nThis endpoint is especially useful for users who wish to review their past\norders, check the status of current orders, or simply have a consolidated\nview of their purchasing history on the platform. It supports pagination,\nallowing users to navigate through their orders efficiently, regardless of\nthe total number of orders they have placed.\n\n**Note**: This endpoint is usable by both `buyer` and `seller` users, as\nit provides a comprehensive view of all orders associated with the user.",
                "operationId": "get_current_user_orders_api_v1_users_me_orders_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrdersInUserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a specific user by ID",
                "description": "This endpoint is designed to retrieve detailed information about a\nspecific user by their unique identifier (ID). It is primarily intended\nfor administrative use or for functionalities within the application that\nrequire detailed user information.\n\nUpon receiving a valid request, the endpoint queries the database for a\nuser with the specified `user_id`. If found, it returns the user's\ninformation. If the user is not found, the endpoint returns a `404 Not\nFound` error, indicating that the user with the given ID does not exist.\n\nThis endpoint is crucial for operations that require fetching user details\nbased on their ID, such as viewing profiles, administrative tasks, or\nsupporting user-related queries where direct identification is necessary.",
                "operationId": "get_user_api_v1_users__user_id__get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The user's ID.",
                            "title": "User Id"
                        },
                        "description": "The user's ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update a user by ID",
                "description": "Updates a user's information based on the provided user ID and update data.\n\nThis endpoint allows for the modification of a user's details in the\ndatabase. It is secured to ensure that only authenticated users can update\nuser information, and further, that users can only update their own\ninformation unless they have administrative privileges.\n\nThe function first attempts to update the user's information in the\ndatabase using the provided `user_id` and `user_data`. If successful, it\nreturns a JSON response containing the updated user information, a success\nmessage, and the HTTP status code 200 OK.",
                "operationId": "update_user_api_v1_users__user_id__put",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The user's ID.",
                            "title": "User Id"
                        },
                        "description": "The user's ID."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete a user by ID",
                "description": "Deletes a user account by user ID.\n\nThis endpoint facilitates the deletion of a user account from the\ndatabase, identified by its unique user ID. It is designed to ensure that\nonly authorized users, such as administrators or the users themselves, can\ndelete user accounts.\n\nAn error will be thrown when any of the following conditions are met:\n- the user is not found\n- the current user does not have the rights to delete the account\n- any other error occurs during the deletion process.",
                "operationId": "delete_user_api_v1_users__user_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid4",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}/orders": {
            "get": {
                "tags": [
                    "users",
                    "orders"
                ],
                "summary": "Retrieve orders made by a specific user",
                "description": "Retrieves all orders made by a specific user.\n\nThis endpoint is designed to fetch a list of orders placed by a specific\nuser, identified by their unique user ID. It ensures data privacy and\nintegrity by allowing only authorized access to user order information.",
                "operationId": "get_user_orders_api_v1_users__user_id__orders_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The user's ID.",
                            "title": "User Id"
                        },
                        "description": "The user's ID."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrdersInUserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}/products": {
            "get": {
                "tags": [
                    "users",
                    "products"
                ],
                "summary": "Retrieve products created by a specific user",
                "description": "Retrieve products created by a specific user.\n\nThis endpoint fetches a list of products that have been created by a\nspecific user, identified by their unique user ID. It is designed to\nsupport scenarios where users can create, list, and manage their own\nproducts within the platform.\n\nThe function executes a database query through `crud_user.get_products`,\npassing in the database session (`db`) and the user ID (`user_id`). This\nfunction is responsible for fetching all products that have been created\nby the specified user from the database.\n\nIf any error occurs during the database query process or if the user ID\ndoes not exist in the database, an error will be encountered and returned\nto the user.",
                "operationId": "get_user_products_api_v1_users__user_id__products_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The user's ID.",
                            "title": "User Id"
                        },
                        "description": "The user's ID."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductsInUserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "post": {
                "tags": [
                    "products"
                ],
                "summary": "Create a new product",
                "description": "Creates a new product.\n\nThis endpoint allows authenticated users with the role of `seller` to\ncreate a new product by providing its details. The product's information,\nincluding name, description, unit price, stock status, and number in\nstock, is submitted through form data. Images for the product can be\nuploaded as files.\n\nAn error is encountered If the current user's role is not `seller`,\nindicating they are not authorized to create a product. This operation\nrequires the user to be authenticated and authorized as a `seller`.",
                "operationId": "create_product_api_v1_products_post",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_create_product_api_v1_products_post"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Retrieve all products",
                "description": "Retrieves all products with pagination.\n\nThis authenticated endpoint provides a list of all products available in\nthe database for authenticated users. It supports pagination through\n`skip` and `limit` query parameters, allowing clients to fetch products\nin manageable chunks.",
                "operationId": "get_products_api_v1_products_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductsPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/{product_id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Retrieve a product by ID",
                "description": "Retrieve a product by its unique identifier (UUID).\n\nThis authenticated endpoint allows users to retrieve detailed information\nabout a specific product by providing its unique identifier (UUID). The\nproduct's details, including name, description, unit price, and stock\nstatus, are returned.\n\nThis operation requires user authentication. Only authenticated users can\naccess the detailed information of a specific product. It is designed to\nprovide users with detailed information about a product they may be\ninterested in purchasing or learning more about.",
                "operationId": "get_product_api_v1_products__product_id__get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Product Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "products"
                ],
                "summary": "Update a product",
                "description": "Updates an existing product in the database.\n\nThis authenticated endpoint allows users with the role of `seller` to\nupdate the details of an existing product by providing its unique\nidentifier (UUID) and the new values for its attributes. The product's\nname, description, unit price, stock status, and number in stock can be\nupdated. Additionally, new images for the product can be uploaded.\n\nThis operation requires user authentication and authorization as the\nproduct's owner. It involves updating the product's details in the\ndatabase and optionally saving new images, returning the updated\nproduct's details upon success.",
                "operationId": "update_product_api_v1_products__product_id__put",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Product Id"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Body_update_product_api_v1_products__product_id__put"
                                    }
                                ],
                                "title": "Body"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "products"
                ],
                "summary": "Delete a product",
                "description": "Deletes an existing product from the database.\n\nThis authenticated endpoint allows users with the role of 'seller' to\ndelete a product by providing its unique identifier (UUID). The deletion\nprocess is performed in the context of the current user's session,\nensuring that only the product's owner can delete it.\n\nThis operation requires user authentication and authorization as the\nproduct's owner. It ensures that only authorized users can delete their\nproducts, maintaining data integrity and security.",
                "operationId": "delete_product_api_v1_products__product_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Product Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/{product_id}/orders": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Retrieve all orders for a product",
                "description": "Retrieve all orders associated with a specific product.\n\nThis authenticated endpoint allows users to retrieve a list of all orders\nassociated with a specific product by providing the product's unique\nidentifier (UUID). It is particularly useful for sellers who wish to track\nthe sales of their products.\n\nThis operation requires user authentication. It is designed to provide\nsellers with detailed information about the orders for their products,\nfacilitating order management and fulfillment.",
                "operationId": "get_product_order_api_v1_products__product_id__orders_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Product Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrdersPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/orders": {
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "description": "Creates a new order for the current user.\n\nThis endpoint is responsible for creating a new order based on the\nprovided order details. It ensures that only authenticated users can\ncreate orders and that the orders are associated with their account.\n\nAn order can be created with one or more products, each with a specified\nquantity. The endpoint validates the product availability and quantity to\nensure that the order can be fulfilled successfully. If the order is\nvalid, it is created and stored in the database.",
                "operationId": "create_order_api_v1_orders_post",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "orders",
                    "orders"
                ],
                "summary": "Retrieve all orders",
                "description": "Retrieve all orders with optional pagination.\n\nThis endpoint fetches a list of all orders placed within the system, with\nsupport for pagination through `skip` and `limit` parameters. It is\ndesigned to provide a comprehensive view of orders for administrative\npurposes or for users with the appropriate permissions.\n\nOmitting the `skip` and `limit` will return the first 10 orders by default.",
                "operationId": "get_orders_api_v1_orders_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items to return.",
                            "default": 10,
                            "title": "Limit"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrdersPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/orders/{order_id}": {
            "get": {
                "tags": [
                    "orders"
                ],
                "summary": "Retrieve a single order",
                "description": "Retrieve a single order by its unique order ID.\n\nThis endpoint is designed to fetch detailed information about a specific\norder, identified by its unique order ID. It ensures that only authorized\nusers can access order details, typically the user who placed the order or\nusers with administrative privileges.\n\nAn error is encountered if the order is not found in the database or if\nany error occurs during the database query process.",
                "operationId": "get_order_api_v1_orders__order_id__get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Order Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "orders"
                ],
                "summary": "Update an order",
                "description": "Updates an existing order.\n\nThis endpoint allows for the modification of an existing order, identified\nby its unique order ID. It ensures that only the user who placed the order\nor users with administrative privileges can update the order details.\n\nThis request would update the specified order with the new items and\ninstructions provided in the request body.",
                "operationId": "update_order_api_v1_orders__order_id__put",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Order Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPublic"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "orders"
                ],
                "summary": "Delete an order",
                "description": "Deletes an existing order from the database.\n\nThis endpoint allows users to delete an order by specifying its unique\nidentifier (UUID). The deletion process is performed in the context of the\ncurrent user's session, ensuring that only authorized users can delete\norders they have access to.\n\nWhere `{order_id}` is the UUID of the order to be deleted.",
                "operationId": "delete_order_api_v1_orders__order_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Order Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Login",
                "operationId": "login_api_v1_login_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_login_api_v1_login_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/status/": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "API Status",
                "description": "Check the API status.",
                "operationId": "get_api_status_api_v1_status__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Body_create_product_api_v1_products_post": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "unit_price": {
                        "type": "number",
                        "title": "Unit Price"
                    },
                    "images": {
                        "items": {
                            "type": "string",
                            "format": "binary"
                        },
                        "type": "array",
                        "title": "Images"
                    },
                    "in_stock": {
                        "type": "boolean",
                        "title": "In Stock"
                    },
                    "number_in_stock": {
                        "type": "integer",
                        "title": "Number In Stock"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "unit_price",
                    "images",
                    "in_stock",
                    "number_in_stock"
                ],
                "title": "Body_create_product_api_v1_products_post"
            },
            "Body_login_api_v1_login_post": {
                "properties": {
                    "grant_type": {
                        "anyOf": [
                            {
                                "type": "string",
                                "pattern": "password"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grant Type"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "scope": {
                        "type": "string",
                        "title": "Scope",
                        "default": ""
                    },
                    "client_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Id"
                    },
                    "client_secret": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Secret"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "Body_login_api_v1_login_post"
            },
            "Body_update_product_api_v1_products__product_id__put": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "unit_price": {
                        "type": "number",
                        "title": "Unit Price"
                    },
                    "in_stock": {
                        "type": "boolean",
                        "title": "In Stock"
                    },
                    "number_in_stock": {
                        "type": "integer",
                        "title": "Number In Stock"
                    },
                    "images": {
                        "items": {
                            "type": "string",
                            "format": "binary"
                        },
                        "type": "array",
                        "title": "Images"
                    }
                },
                "type": "object",
                "title": "Body_update_product_api_v1_products__product_id__put"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "ImageResponse": {
                "properties": {
                    "file_path": {
                        "type": "string",
                        "title": "File Path"
                    },
                    "image_id": {
                        "type": "string",
                        "format": "uuid",
                        "title": "Image Id"
                    }
                },
                "type": "object",
                "required": [
                    "file_path",
                    "image_id"
                ],
                "title": "ImageResponse",
                "description": "Represents the schema for an image response."
            },
            "Order": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "default": "2024-06-27T12:45:00.365338Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At",
                        "default": "2024-06-27T12:45:00.365418Z"
                    },
                    "order_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "Order Id"
                    },
                    "product_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Product Url"
                    }
                },
                "type": "object",
                "required": [
                    "order_id",
                    "product_url"
                ],
                "title": "Order",
                "description": "Represents the public schema for an order."
            },
            "OrderCreate": {
                "properties": {
                    "orders": {
                        "items": {
                            "$ref": "#/components/schemas/OrderProductCreate"
                        },
                        "type": "array",
                        "title": "Orders"
                    }
                },
                "type": "object",
                "required": [
                    "orders"
                ],
                "title": "OrderCreate",
                "description": "Represents the schema for creating an order."
            },
            "OrderInUserResponse": {
                "properties": {
                    "order_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "Order Id"
                    },
                    "product_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Product Url"
                    },
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity"
                    }
                },
                "type": "object",
                "required": [
                    "order_id",
                    "product_url",
                    "quantity"
                ],
                "title": "OrderInUserResponse"
            },
            "OrderProductCreate": {
                "properties": {
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity",
                        "description": "The number of items to order"
                    },
                    "product_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "Product Id",
                        "description": "The ID of the product"
                    }
                },
                "type": "object",
                "required": [
                    "quantity",
                    "product_id"
                ],
                "title": "OrderProductCreate",
                "description": "Represents the schema for creating an order product."
            },
            "OrderPublic": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Order retrieved successfully"
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/Order"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "OrderPublic",
                "description": "Represents the public schema for an order."
            },
            "OrderUpdate": {
                "properties": {
                    "orders": {
                        "items": {
                            "$ref": "#/components/schemas/OrderProductCreate"
                        },
                        "type": "array",
                        "title": "Orders"
                    }
                },
                "type": "object",
                "required": [
                    "orders"
                ],
                "title": "OrderUpdate",
                "description": "Represents the schema for updating an order."
            },
            "OrdersInUserResponse": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "User orders retrieved successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/OrderInUserResponse"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "count",
                    "data"
                ],
                "title": "OrdersInUserResponse",
                "description": "Represents a list of orders in a user response."
            },
            "OrdersPublic": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Orders retrieved successfully"
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "OrdersPublic",
                "description": "Represents a list of public orders."
            },
            "Product": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "default": "2024-06-27T12:45:00.365338Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At",
                        "default": "2024-06-27T12:45:00.365418Z"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "The product's description."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The product's name."
                    },
                    "in_stock": {
                        "type": "boolean",
                        "title": "In Stock",
                        "description": "The product's stock status."
                    },
                    "number_in_stock": {
                        "type": "integer",
                        "title": "Number In Stock",
                        "default": 0
                    },
                    "unit_price": {
                        "type": "number",
                        "title": "Unit Price",
                        "description": "The product's price."
                    },
                    "product_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "Product Id"
                    },
                    "orders": {
                        "items": {
                            "$ref": "#/components/schemas/OrderInUserResponse"
                        },
                        "type": "array",
                        "title": "Orders"
                    },
                    "product_owner": {
                        "$ref": "#/components/schemas/UserInProductResponse"
                    },
                    "images": {
                        "items": {
                            "$ref": "#/components/schemas/ImageResponse"
                        },
                        "type": "array",
                        "title": "Images"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "in_stock",
                    "unit_price",
                    "product_id",
                    "orders",
                    "product_owner",
                    "images"
                ],
                "title": "Product",
                "description": "Represents the public schema for a product."
            },
            "ProductInUserResponse": {
                "properties": {
                    "product_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "Product Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "unit_price": {
                        "type": "number",
                        "title": "Unit Price"
                    },
                    "number_in_stock": {
                        "type": "integer",
                        "title": "Number In Stock"
                    },
                    "in_stock": {
                        "type": "boolean",
                        "title": "In Stock"
                    }
                },
                "type": "object",
                "required": [
                    "product_id",
                    "name",
                    "description",
                    "unit_price",
                    "number_in_stock",
                    "in_stock"
                ],
                "title": "ProductInUserResponse"
            },
            "ProductPublic": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Product retrieved successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/Product"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "ProductPublic",
                "description": "Represents the public schema for a product."
            },
            "ProductsInUserResponse": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "User products retrieved successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ProductInUserResponse"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "count",
                    "data"
                ],
                "title": "ProductsInUserResponse"
            },
            "ProductsPublic": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Products retrieved successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Product"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "ProductsPublic",
                "description": "Represents a list of public products."
            },
            "Status": {
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "Status"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "servers": {
                        "items": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Servers"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "version",
                    "title",
                    "servers"
                ],
                "title": "Status",
                "description": "Represents the schema for a status."
            },
            "StatusResponse": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "TinyCart API is running."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/Status"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "StatusResponse",
                "description": "Represents the schema for a status response."
            },
            "Token": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Token created successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 201
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/TokenBase"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "Token",
                "description": "Represents the schema for a token."
            },
            "TokenBase": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type",
                        "default": "bearer"
                    },
                    "expires": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Expires"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "expires"
                ],
                "title": "TokenBase",
                "description": "Represents the schema for a token."
            },
            "User": {
                "properties": {
                    "email": {
                        "type": "string",
                        "maxLength": 255,
                        "format": "email",
                        "title": "Email"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoles"
                    },
                    "username": {
                        "type": "string",
                        "maxLength": 30,
                        "title": "Username"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "default": "2024-06-27T12:45:00.365338Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At",
                        "default": "2024-06-27T12:45:00.365418Z"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "User Id"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "role",
                    "username",
                    "user_id"
                ],
                "title": "User"
            },
            "UserCreate": {
                "properties": {
                    "email": {
                        "type": "string",
                        "maxLength": 255,
                        "format": "email",
                        "title": "Email"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoles"
                    },
                    "username": {
                        "type": "string",
                        "maxLength": 30,
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "maxLength": 40,
                        "minLength": 8,
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "role",
                    "username",
                    "password"
                ],
                "title": "UserCreate",
                "description": "Represents the schema for creating a user."
            },
            "UserInProductResponse": {
                "properties": {
                    "user_id": {
                        "type": "string",
                        "format": "uuid4",
                        "title": "User Id"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    }
                },
                "type": "object",
                "required": [
                    "user_id",
                    "username"
                ],
                "title": "UserInProductResponse",
                "description": "Represents the schema for a user in a product response."
            },
            "UserPublic": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "User retrieved successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "UserPublic"
            },
            "UserRoles": {
                "type": "string",
                "enum": [
                    "seller",
                    "buyer"
                ],
                "title": "UserRoles"
            },
            "UserUpdate": {
                "properties": {
                    "email": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 255,
                                "format": "email"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email"
                    },
                    "username": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 30
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Username"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/UserRoles"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "title": "UserUpdate",
                "description": "Represents the schema for updating a user."
            },
            "UsersPublic": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Users retrieved successfully."
                    },
                    "status_code": {
                        "type": "integer",
                        "title": "Status Code",
                        "default": 200
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "default": true
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count",
                        "description": "The number of users retrieved."
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "count",
                    "data"
                ],
                "title": "UsersPublic",
                "description": "Represents a list of public users."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "OAuth2PasswordBearer": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "scopes": {},
                        "tokenUrl": "api/v1/login"
                    }
                }
            }
        }
    }
}
